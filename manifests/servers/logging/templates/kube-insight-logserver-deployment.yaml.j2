apiVersion: v1
kind: Service
metadata:
  name: kube-insight-logserver
  namespace: {{ vars['namespace'] }}
  labels:
    kubernetes.io/cluster-service: "true"
    task: "kube-insight-logserver"
    kubernetes.io/name: "kube-insight-logserver"
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    k8s-app: kube-insight-logserver

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kube-insight-logserver
  namespace: {{ vars['namespace'] }}
  labels:
    k8s-app: "kube-insight-logserver"
    kubernetes.io/cluster-service: "true"
    version: "v{{ vars['version'] }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: kube-insight-logserver
      version: v{{ vars['version'] }}
  template:
    metadata:
      labels:
        task: "kube-insight-logserver"
        k8s-app: "kube-insight-logserver"
        version: "v{{ vars['version'] }}"
    spec:
      containers:
      - name: kube-insight-logserver
        image: {{ vars['image'] }}:{{ vars['version'] }}
        imagePullPolicy: {{ vars['pullPolicy'] }}
        args:
          - --port=8080
          - --cassandra-keyspace={{ vars['cassandraKeyspace'] }}
          - --cassandra-replication-strategy={{ vars['cassandraReplicationStrategy'] }}
          - --cassandra-replication-factors={{ vars['cassandraReplicationFactors'] }}
          - --cassandra-write-concurrency={{ vars['cassandraWriteConcurrency'] }}
          - --log-level={{ vars['logLevel'] }}
{% for node in vars['cassandraHosts'] %}
          - {{ node }}
{% endfor %}
        readinessProbe:
          httpGet:
            path: /write
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /write
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
        resources:
          limits:
            cpu: {{ vars['cpuLimitMilliCores'] }}m
            memory: {{ vars['memLimitMB'] }}Mi
          requests:
            cpu: {{ vars['cpuRequestMilliCores'] }}m
            memory: {{ vars['memRequestMB'] }}Mi
      tolerations:
      # allow scheduling onto master
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
